// <auto-generated />
using System;
using Appointments.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Appointments.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240623154105_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Appointments.Domain.AppointmentAggregate.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Appointments.Domain.OfficeAggregate.Office", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("_appointmentIds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AppointmentIds");

                    b.HasKey("Id");

                    b.ToTable("Offices");
                });

            modelBuilder.Entity("Appointments.Domain.PatientAggregate.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_appointmentIds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AppointmentIds");

                    b.HasKey("Id");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Appointments.Infrastructure.IntegrationEvents.ConsumedIntegrationEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Handler")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id", "Handler");

                    b.ToTable("ConsumedIntegrationEvents");
                });

            modelBuilder.Entity("Appointments.Infrastructure.IntegrationEvents.OutboxIntegrationEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EventContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OutboxIntegrationEvents");
                });

            modelBuilder.Entity("Appointments.Domain.AppointmentAggregate.Appointment", b =>
                {
                    b.OwnsOne("Appointments.Domain.Common.ValueObjects.TimeRange", "TimeRange", b1 =>
                        {
                            b1.Property<Guid>("AppointmentId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<TimeOnly>("End")
                                .HasColumnType("time");

                            b1.Property<TimeOnly>("Start")
                                .HasColumnType("time");

                            b1.HasKey("AppointmentId");

                            b1.ToTable("Appointments");

                            b1.WithOwner()
                                .HasForeignKey("AppointmentId");
                        });

                    b.Navigation("TimeRange")
                        .IsRequired();
                });

            modelBuilder.Entity("Appointments.Domain.OfficeAggregate.Office", b =>
                {
                    b.OwnsOne("Appointments.Domain.Common.Entities.BookedSchedule", "BookedSchedule", b1 =>
                        {
                            b1.Property<Guid>("OfficeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Calendar")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("BookedScheduleCalendar");

                            b1.Property<Guid?>("Id")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("BookedScheduleId");

                            b1.HasKey("OfficeId");

                            b1.ToTable("Offices");

                            b1.WithOwner()
                                .HasForeignKey("OfficeId");
                        });

                    b.OwnsOne("Appointments.Domain.OfficeAggregate.Entities.WorkingSchedule", "WorkingSchedule", b1 =>
                        {
                            b1.Property<Guid>("OfficeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Calendar")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("WorkingScheduleCalendar");

                            b1.Property<Guid?>("Id")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("WorkingScheduleId");

                            b1.HasKey("OfficeId");

                            b1.ToTable("Offices");

                            b1.WithOwner()
                                .HasForeignKey("OfficeId");
                        });

                    b.Navigation("BookedSchedule")
                        .IsRequired();

                    b.Navigation("WorkingSchedule")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
